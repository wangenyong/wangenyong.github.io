"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9349],{3905:(n,e,t)=>{t.d(e,{Zo:()=>m,kt:()=>g});var a=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function p(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?p(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},p=Object.keys(n);for(a=0;a<p.length;a++)t=p[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(n);for(a=0;a<p.length;a++)t=p[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var s=a.createContext({}),i=function(n){var e=a.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},m=function(n){var e=i(n.components);return a.createElement(s.Provider,{value:e},n.children)},d="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},k=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,p=n.originalType,s=n.parentName,m=l(n,["components","mdxType","originalType","parentName"]),d=i(t),k=r,g=d["".concat(s,".").concat(k)]||d[k]||u[k]||p;return t?a.createElement(g,o(o({ref:e},m),{},{components:t})):a.createElement(g,o({ref:e},m))}));function g(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var p=t.length,o=new Array(p);o[0]=k;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l[d]="string"==typeof n?n:r,o[1]=l;for(var i=2;i<p;i++)o[i]=t[i];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},1494:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>p,metadata:()=>l,toc:()=>i});var a=t(7462),r=(t(7294),t(3905));const p={sidebar_position:7,title:"\u6570\u636e\u5206\u7ec4\u805a\u5408"},o=void 0,l={unversionedId:"pandas/data-aggregation",id:"pandas/data-aggregation",title:"\u6570\u636e\u5206\u7ec4\u805a\u5408",description:"\u5206\u7ec4",source:"@site/docs/pandas/data-aggregation.md",sourceDirName:"pandas",slug:"/pandas/data-aggregation",permalink:"/docs/pandas/data-aggregation",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/pandas/data-aggregation.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"\u6570\u636e\u5206\u7ec4\u805a\u5408"},sidebar:"tutorialSidebar",previous:{title:"\u6570\u636e\u53ef\u89c6\u5316",permalink:"/docs/pandas/plotting-visualiazation"},next:{title:"\u5b89\u88c5",permalink:"/docs/docker/docker-install"}},s={},i=[{value:"\u5206\u7ec4",id:"\u5206\u7ec4",level:2},{value:"\u57fa\u672c\u4f7f\u7528",id:"\u57fa\u672c\u4f7f\u7528",level:3},{value:"\u5bf9\u5206\u7ec4\u8fdb\u884c\u8fed\u4ee3",id:"\u5bf9\u5206\u7ec4\u8fdb\u884c\u8fed\u4ee3",level:3},{value:"\u9009\u53d6\u4e00\u5217\u6216\u5217\u7684\u5b50\u96c6",id:"\u9009\u53d6\u4e00\u5217\u6216\u5217\u7684\u5b50\u96c6",level:3},{value:"\u901a\u8fc7\u6620\u5c04\u8fdb\u884c\u5206\u7ec4",id:"\u901a\u8fc7\u6620\u5c04\u8fdb\u884c\u5206\u7ec4",level:3},{value:"\u901a\u8fc7\u51fd\u6570\u8fdb\u884c\u5206\u7ec4",id:"\u901a\u8fc7\u51fd\u6570\u8fdb\u884c\u5206\u7ec4",level:3},{value:"\u6839\u636e\u7d22\u5f15\u7ea7\u522b\u5206\u7ec4",id:"\u6839\u636e\u7d22\u5f15\u7ea7\u522b\u5206\u7ec4",level:3},{value:"\u805a\u5408",id:"\u805a\u5408",level:2},{value:"\u57fa\u672c\u4f7f\u7528",id:"\u57fa\u672c\u4f7f\u7528-1",level:3},{value:"\u4e0d\u540c\u5217\u4f7f\u7528\u4e0d\u540c\u7684\u51fd\u6570",id:"\u4e0d\u540c\u5217\u4f7f\u7528\u4e0d\u540c\u7684\u51fd\u6570",level:3},{value:"apply",id:"apply",level:3}],m={toc:i},d="wrapper";function u(n){let{components:e,...p}=n;return(0,r.kt)(d,(0,a.Z)({},m,p,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"\u5206\u7ec4"},"\u5206\u7ec4"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(5643).Z,width:"1038",height:"896"})),(0,r.kt)("h3",{id:"\u57fa\u672c\u4f7f\u7528"},"\u57fa\u672c\u4f7f\u7528"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df = pd.DataFrame({'key1' : ['a', 'a', 'b', 'b', 'a'],\n                       'key2' : ['one', 'two', 'one', 'two', 'one'],\n                       'data1' : np.random.randn(5),\n                       'data2' : np.random.randn(5)})\n>>> df\n  key1 key2     data1     data2\n0    a  one -0.606091 -1.181332\n1    a  two -0.866639  0.300651\n2    b  one -1.218590  1.054789\n3    b  two -1.984462 -1.148834\n4    a  one  0.187622  0.857184\n")),(0,r.kt)("p",null,"\u6309 ",(0,r.kt)("strong",{parentName:"p"},"key1")," \u8fdb\u884c\u5206\u7ec4\uff0c\u5e76\u8ba1\u7b97 ",(0,r.kt)("strong",{parentName:"p"},"data1")," \u5217\u7684\u5e73\u5747\u503c\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> grouped = df['data1'].groupby(df['key1'])\n>>> grouped\n<pandas.core.groupby.generic.SeriesGroupBy object at 0x7f1fea017130>\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"\u53d8\u91cf ",(0,r.kt)("strong",{parentName:"p"},"grouped")," \u662f\u4e00\u4e2a ",(0,r.kt)("strong",{parentName:"p"},"GroupBy")," \u5bf9\u8c61\u3002\u5b83\u5b9e\u9645\u4e0a\u8fd8\u6ca1\u6709\u8fdb\u884c\u4efb\u4f55\u8ba1\u7b97\uff0c\u53ea\u662f\u542b\u6709\u4e00\u4e9b\u6709\u5173\u5206\u7ec4\u952e",(0,r.kt)("strong",{parentName:"p"},"df","['key1']")," \u7684\u4e2d\u95f4\u6570\u636e\u800c\u5df2\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8be5\u5bf9\u8c61\u5df2\u7ecf\u6709\u4e86\u63a5\u4e0b\u6765\u5bf9\u5404\u5206\u7ec4\u6267\u884c\u8fd0\u7b97\u6240\u9700\u7684\u4e00\u5207\u4fe1\u606f\u3002")),(0,r.kt)("p",null,"\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528 ",(0,r.kt)("strong",{parentName:"p"},"GroupBy")," \u7684 ",(0,r.kt)("strong",{parentName:"p"},"mean")," \u65b9\u6cd5\u6765\u8ba1\u7b97\u5206\u7ec4\u5e73\u5747\u503c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> grouped.mean()\nkey1\na   -0.428369\nb   -1.601526\nName: data1, dtype: float64\n")),(0,r.kt)("p",null,"\u6309\u7167\u591a\u4e2a ",(0,r.kt)("strong",{parentName:"p"},"key")," \u8fdb\u884c\u5206\u7ec4\uff0c\u5f97\u5230\u7ed3\u679c\u5305\u542b\u5c42\u6b21\u5316\u7d22\u5f15\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> means = df['data1'].groupby([df['key1'], df['key2']]).mean()\n>>> means\nkey1  key2\na     one    -0.209234\n      two    -0.866639\nb     one    -1.218590\n      two    -1.984462\nName: data1, dtype: float64\n")),(0,r.kt)("admonition",{title:"unstack",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> means.unstack()\nkey2       one       two\nkey1                    \na    -0.209234 -0.866639\nb    -1.218590 -1.984462\n"))),(0,r.kt)("p",null,"\u4e0a\u9762\u7684\u4f8b\u5b50\u91cc\u9009\u53d6\u7684\u5206\u7ec4\u952e\u4e3a ",(0,r.kt)("strong",{parentName:"p"},"DataFrame")," \u4e2d\u7684\u5217\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u9009\u62e9\u4efb\u610f\u7684\u6570\u7ec4\u4f5c\u4e3a\u5206\u7ec4\u952e\uff0c\u4f46\u6570\u7ec4\u957f\u5ea6\u8981\u548c ",(0,r.kt)("strong",{parentName:"p"},"DataFrame")," \u4e00\u81f4\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> states = np.array(['Ohio', 'California', 'California', 'Ohio', 'Ohio'])\n>>> years = np.array([2005, 2005, 2006, 2005, 2006])\n\n>>> df['data1'].groupby([states, years]).mean()\nCalifornia  2005   -0.866639\n            2006   -1.218590\nOhio        2005   -1.295276\n            2006    0.187622\nName: data1, dtype: float64\n")),(0,r.kt)("p",null,"\u901a\u5e38\uff0c\u53ef\u4ee5\u5c06 ",(0,r.kt)("strong",{parentName:"p"},"DataFrame")," \u4e2d\u7684\u5217\u540d\u76f4\u63a5\u4f5c\u4e3a\u5206\u7ec4\u952e\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df.groupby('key1').mean()\n         data1     data2\nkey1                    \na    -0.428369 -0.007833\nb    -1.601526 -0.047023\n\n>>> df.groupby(['key1', 'key2']).mean()\n              data1     data2\nkey1 key2                    \na    one  -0.209234 -0.162074\n     two  -0.866639  0.300651\nb    one  -1.218590  1.054789\n     two  -1.984462 -1.148834\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u5728\u6267\u884c ",(0,r.kt)("strong",{parentName:"p"},"df.groupby('key1').mean()")," \u65f6\uff0c\u7ed3\u679c\u4e2d\u6ca1\u6709 ",(0,r.kt)("strong",{parentName:"p"},"key2")," \u5217\uff0c\u8fd9\u662f\u56e0\u4e3a ",(0,r.kt)("strong",{parentName:"p"},"df","['key2']")," \u4e0d\u662f\u6570\u503c\u6570\u636e\uff08\u4fd7\u79f0\u201c\u9ebb\u70e6\u5217\u201d\uff09\uff0c\u6240\u4ee5\u88ab\u4ece\u7ed3\u679c\u4e2d\u6392\u9664\u4e86\u3002")),(0,r.kt)("p",null,"\u65e0\u8bba\u4f60\u51c6\u5907\u62ff ",(0,r.kt)("strong",{parentName:"p"},"groupby")," \u505a\u4ec0\u4e48\uff0c\u90fd\u6709\u53ef\u80fd\u4f1a\u7528\u5230 ",(0,r.kt)("strong",{parentName:"p"},"GroupBy")," \u7684 ",(0,r.kt)("strong",{parentName:"p"},"size")," \u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u542b\u6709\u5206\u7ec4\u5927\u5c0f\u7684 ",(0,r.kt)("strong",{parentName:"p"},"Series"),"\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df.groupby(['key1', 'key2']).size()\nkey1  key2\na     one     2\n      two     1\nb     one     1\n      two     1\ndtype: int64\n")),(0,r.kt)("h3",{id:"\u5bf9\u5206\u7ec4\u8fdb\u884c\u8fed\u4ee3"},"\u5bf9\u5206\u7ec4\u8fdb\u884c\u8fed\u4ee3"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"GroupBy")," \u5bf9\u8c61\u652f\u6301\u8fed\u4ee3\uff0c\u53ef\u4ee5\u4ea7\u751f\u4e00\u7ec4\u4e8c\u5143\u5143\u7ec4\uff08\u7531\u5206\u7ec4\u540d\u548c\u6570\u636e\u5757\u7ec4\u6210\uff09\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> for name, group in df.groupby('key1'):\n...     print(name)\n...     print(group)\n\na\n  key1 key2     data1     data2\n0    a  one -0.606091 -1.181332\n1    a  two -0.866639  0.300651\n4    a  one  0.187622  0.857184\nb\n  key1 key2     data1     data2\n2    b  one -1.218590  1.054789\n3    b  two -1.984462 -1.148834\n")),(0,r.kt)("p",null,"\u5bf9\u4e8e\u591a\u91cd\u952e\u7684\u60c5\u51b5\uff0c\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c06\u4f1a\u662f\u7531\u952e\u503c\u7ec4\u6210\u7684\u5143\u7ec4\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> for (k1, k2), group in df.groupby(['key1', 'key2']):\n...     print((k1, k2))\n...     print(group)\n\n('a', 'one')\n  key1 key2     data1     data2\n0    a  one -0.606091 -1.181332\n4    a  one  0.187622  0.857184\n('a', 'two')\n  key1 key2     data1     data2\n1    a  two -0.866639  0.300651\n('b', 'one')\n  key1 key2    data1     data2\n2    b  one -1.21859  1.054789\n('b', 'two')\n  key1 key2     data1     data2\n3    b  two -1.984462 -1.148834\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"\u5206\u7ec4\u6570\u636e\u53ef\u8f6c\u5316\u4e3a\u5b57\u5178\uff1a"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> pieces = dict(list(df.groupby('key1')))\n>>> pieces\n{'a':   key1 key2     data1     data2\n      0    a  one -0.606091 -1.181332\n      1    a  two -0.866639  0.300651\n      4    a  one  0.187622  0.857184, \n 'b':   key1 key2     data1     data2\n      2    b  one -1.218590  1.054789\n      3    b  two -1.984462 -1.148834}\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"groupby")," \u9ed8\u8ba4\u662f\u5728 ",(0,r.kt)("strong",{parentName:"p"},"axis=0")," \u4e0a\u8fdb\u884c\u5206\u7ec4\u7684\uff0c\u901a\u8fc7\u8bbe\u7f6e\u4e5f\u53ef\u4ee5\u5728\u5176\u4ed6\u4efb\u4f55\u8f74\u4e0a\u8fdb\u884c\u5206\u7ec4\u3002\u4f8b\u5982\u53ef\u4ee5\u6839\u636e ",(0,r.kt)("strong",{parentName:"p"},"dtype")," \u5bf9\u5217\u8fdb\u884c\u5206\u7ec4\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df.dtypes\nkey1      object\nkey2      object\ndata1    float64\ndata2    float64\ndtype: object\n    \n>>> grouped = df.groupby(df.dtypes, axis=1)\n\n>>> for dtype, group in grouped:\n...     print(dtype)\n...     print(group)\n\nfloat64\n      data1     data2\n0 -0.606091 -1.181332\n1 -0.866639  0.300651\n2 -1.218590  1.054789\n3 -1.984462 -1.148834\n4  0.187622  0.857184\nobject\n  key1 key2\n0    a  one\n1    a  two\n2    b  one\n3    b  two\n4    a  one\n")),(0,r.kt)("h3",{id:"\u9009\u53d6\u4e00\u5217\u6216\u5217\u7684\u5b50\u96c6"},"\u9009\u53d6\u4e00\u5217\u6216\u5217\u7684\u5b50\u96c6"),(0,r.kt)("p",null,"\u5bf9\u4e8e\u7531 ",(0,r.kt)("strong",{parentName:"p"},"DataFrame")," \u4ea7\u751f\u7684 ",(0,r.kt)("strong",{parentName:"p"},"GroupBy")," \u5bf9\u8c61\uff0c\u5982\u679c\u7528\u4e00\u4e2a\uff08\u5355\u4e2a\u5b57\u7b26\u4e32\uff09\u6216\u4e00\u7ec4\uff08\u5b57\u7b26\u4e32\u6570\u7ec4\uff09\u5217\u540d\u5bf9\u5176\u8fdb\u884c\u7d22\u5f15\uff0c\u5c31\u80fd\u5b9e\u73b0\u9009\u53d6\u90e8\u5206\u5217\u8fdb\u884c\u805a\u5408\u7684\u76ee\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df.groupby('key1')['data1']\n>>> df.groupby('key1')[['data2']]\n")),(0,r.kt)("p",null,"\u662f\u4ee5\u4e0b\u4ee3\u7801\u7684\u8bed\u6cd5\u7cd6\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df['data1'].groupby(df['key1'])\n>>> df[['data2']].groupby(df['key1'])\n")),(0,r.kt)("p",null,"\u5c24\u5176\u5bf9\u4e8e\u5927\u6570\u636e\u96c6\uff0c\u5f88\u53ef\u80fd\u53ea\u9700\u8981\u5bf9\u90e8\u5206\u5217\u8fdb\u884c\u805a\u5408\u3002\u4f8b\u5982\uff0c\u5728\u524d\u9762\u90a3\u4e2a\u6570\u636e\u96c6\u4e2d\uff0c\u5982\u679c\u53ea\u9700\u8ba1\u7b97",(0,r.kt)("strong",{parentName:"p"},"data2")," \u5217\u7684\u5e73\u5747\u503c\u5e76\u4ee5 ",(0,r.kt)("strong",{parentName:"p"},"DataFrame")," \u5f62\u5f0f\u5f97\u5230\u7ed3\u679c\uff0c\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df.groupby(['key1', 'key2'])[['data2']].mean()\n              data2\nkey1 key2          \na    one  -0.162074\n     two   0.300651\nb    one   1.054789\n     two  -1.148834\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"\u5982\u679c\u4f20\u5165\u7684\u662f\u5217\u8868\u6216\u6570\u7ec4\uff0c\u64cd\u4f5c\u8fd4\u56de\u7684\u5bf9\u8c61\u662f\u4e00\u4e2a\u5df2\u5206\u7ec4\u7684 ",(0,r.kt)("strong",{parentName:"p"},"DataFrame"),"\uff1b\u5982\u679c\u4f20\u5165\u7684\u662f\u5355\u4e2a\u5217\u540d\uff0c\u64cd\u4f5c\u8fd4\u56de\u7684\u662f\u5df2\u5206\u7ec4\u7684 ",(0,r.kt)("strong",{parentName:"p"},"Series"),"\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> s_grouped = df.groupby(['key1', 'key2'])['data2']\n\n>>> s_grouped.mean()\nkey1  key2\na     one    -0.162074\n      two     0.300651\nb     one     1.054789\n      two    -1.148834\nName: data2, dtype: float64\n")),(0,r.kt)("h3",{id:"\u901a\u8fc7\u6620\u5c04\u8fdb\u884c\u5206\u7ec4"},"\u901a\u8fc7\u6620\u5c04\u8fdb\u884c\u5206\u7ec4"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> people = pd.DataFrame(np.random.randn(5, 5),\n                          columns=['a', 'b', 'c', 'd', 'e'],\n                          index=['Joe', 'Steve', 'Wes', 'Jim', 'Travis'])\n>>> people.iloc[2:3, [1, 2]] = np.nan\n>>> people\n               a         b         c         d         e\nJoe    -0.107592 -0.112039  1.446168  0.343354  0.279940\nSteve  -0.906023 -0.052071 -1.422474 -0.492246  0.626603\nWes     0.026861       NaN       NaN  1.002414 -0.736593\nJim     0.193563 -1.654297 -0.932921 -0.618760  0.237360\nTravis  0.710881  0.189908 -0.677636  0.513925  1.178200\n")),(0,r.kt)("p",null,"\u73b0\u5728\uff0c\u5047\u8bbe\u5df2\u77e5\u5217\u7684\u5206\u7ec4\u5173\u7cfb\uff0c\u5e76\u5e0c\u671b\u6839\u636e\u5206\u7ec4\u8ba1\u7b97\u5217\u7684\u548c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> mapping = {'a': 'red', 'b': 'red', 'c': 'blue','d': 'blue', 'e': 'red', 'f' : 'orange'}\n>>> by_column = people.groupby(mapping, axis=1)\n>>> by_column.sum()\n            blue       red\nJoe     1.789522  0.060309\nSteve  -1.914719 -0.331491\nWes     1.002414 -0.709732\nJim    -1.551681 -1.223375\nTravis -0.163711  2.078988\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Series")," \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6620\u5c04 ",(0,r.kt)("strong",{parentName:"p"},"mapping")," \uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> map_series = pd.Series(mapping)\n>>> map_series\na       red\nb       red\nc      blue\nd      blue\ne       red\nf    orange\ndtype: object\n    \n>>> people.groupby(map_series, axis=1).count()\n        blue  red\nJoe        2    3\nSteve      2    3\nWes        1    2\nJim        2    3\nTravis     2    3\n")),(0,r.kt)("h3",{id:"\u901a\u8fc7\u51fd\u6570\u8fdb\u884c\u5206\u7ec4"},"\u901a\u8fc7\u51fd\u6570\u8fdb\u884c\u5206\u7ec4"),(0,r.kt)("p",null,"\u6bd4\u8d77\u4f7f\u7528\u5b57\u5178\u6216 ",(0,r.kt)("strong",{parentName:"p"},"Series"),"\uff0c\u4f7f\u7528 ",(0,r.kt)("strong",{parentName:"p"},"Python")," \u51fd\u6570\u662f\u4e00\u79cd\u66f4\u539f\u751f\u7684\u65b9\u6cd5\u5b9a\u4e49\u5206\u7ec4\u6620\u5c04\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> people.groupby(len).sum()\n          a         b         c         d         e\n3  0.112831 -1.766336  0.513247  0.727009 -0.219293\n5 -0.906023 -0.052071 -1.422474 -0.492246  0.626603\n6  0.710881  0.189908 -0.677636  0.513925  1.178200\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"\u4efb\u4f55\u88ab\u5f53\u505a\u5206\u7ec4\u952e\u7684\u51fd\u6570\u90fd\u4f1a\u5728\u5404\u4e2a\u7d22\u5f15\u503c\u4e0a\u88ab\u8c03\u7528\u4e00\u6b21\uff0c\u5176\u8fd4\u56de\u503c\u5c31\u4f1a\u88ab\u7528\u4f5c\u5206\u7ec4\u540d\u79f0\u3002")),(0,r.kt)("p",null,"\u5c06\u51fd\u6570\u8ddf\u6570\u7ec4\u3001\u5217\u8868\u3001\u5b57\u5178\u3001",(0,r.kt)("strong",{parentName:"p"},"Series")," \u6df7\u5408\u4f7f\u7528\u4e5f\u4e0d\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\u4efb\u4f55\u4e1c\u897f\u5728\u5185\u90e8\u90fd\u4f1a\u88ab\u8f6c\u6362\u4e3a\u6570\u7ec4\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> key_list = ['one', 'one', 'one', 'two', 'two']\n\n>>> people.groupby([len, key_list]).min()\n              a         b         c         d         e\n3 one -0.107592 -0.112039  1.446168  0.343354 -0.736593\n  two  0.193563 -1.654297 -0.932921 -0.618760  0.237360\n5 one -0.906023 -0.052071 -1.422474 -0.492246  0.626603\n6 two  0.710881  0.189908 -0.677636  0.513925  1.178200\n")),(0,r.kt)("h3",{id:"\u6839\u636e\u7d22\u5f15\u7ea7\u522b\u5206\u7ec4"},"\u6839\u636e\u7d22\u5f15\u7ea7\u522b\u5206\u7ec4"),(0,r.kt)("p",null,"\u5c42\u6b21\u5316\u7d22\u5f15\u6570\u636e\u96c6\u6700\u65b9\u4fbf\u7684\u5730\u65b9\u5c31\u5728\u4e8e\u5b83\u80fd\u591f\u6839\u636e\u8f74\u7d22\u5f15\u7684\u4e00\u4e2a\u7ea7\u522b\u8fdb\u884c\u805a\u5408\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> columns = pd.MultiIndex.from_arrays([['US', 'US', 'US', 'JP', 'JP'],\n                                         [1, 3, 5, 1, 3]],\n                                        names=['cty', 'tenor'])\n>>> hier_df = pd.DataFrame(np.random.randn(4, 5), columns=columns)\n>>> hier_df\ncty          US                            JP          \ntenor         1         3         5         1         3\n0      1.075830 -0.301233  0.624428 -1.761233  2.263103\n1     -0.445027 -0.564059 -0.475415 -0.914696 -1.403103\n2     -0.865851 -0.008406  0.938678  1.165307 -0.164514\n3     -0.012107  0.098953  2.749072 -0.707615 -0.395376\n")),(0,r.kt)("p",null,"\u8981\u6839\u636e\u7ea7\u522b\u5206\u7ec4\uff0c\u4f7f\u7528 ",(0,r.kt)("strong",{parentName:"p"},"level")," \u5173\u952e\u5b57\u4f20\u9012\u7ea7\u522b\u5e8f\u53f7\u6216\u540d\u5b57\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> hier_df.groupby(level='cty', axis=1).count()\ncty  JP  US\n0     2   3\n1     2   3\n2     2   3\n3     2   3\n")),(0,r.kt)("h2",{id:"\u805a\u5408"},"\u805a\u5408"),(0,r.kt)("h3",{id:"\u57fa\u672c\u4f7f\u7528-1"},"\u57fa\u672c\u4f7f\u7528"),(0,r.kt)("p",null,"\u805a\u5408\u6307\u7684\u662f\u4efb\u4f55\u80fd\u591f\u4ece\u6570\u7ec4\u4ea7\u751f\u6807\u91cf\u503c\u7684\u6570\u636e\u8f6c\u6362\u8fc7\u7a0b\u3002\u4e4b\u524d\u7684\u4f8b\u5b50\u5df2\u7ecf\u7528\u8fc7\u4e00\u4e9b\uff0c\u6bd4\u5982 ",(0,r.kt)("strong",{parentName:"p"},"mean"),"\u3001",(0,r.kt)("strong",{parentName:"p"},"count"),"\u3001",(0,r.kt)("strong",{parentName:"p"},"min")," \u4ee5\u53ca ",(0,r.kt)("strong",{parentName:"p"},"sum")," \u7b49\u3002"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u51fd\u6570\u540d"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"count"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5206\u7ec4\u4e2d\u975e NA \u503c\u7684\u6570\u91cf")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sum"),(0,r.kt)("td",{parentName:"tr",align:null},"\u975e NA \u503c\u7684\u548c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mean"),(0,r.kt)("td",{parentName:"tr",align:null},"\u975e NA \u503c\u7684\u5e73\u5747\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"median"),(0,r.kt)("td",{parentName:"tr",align:null},"\u975e NA \u503c\u7684\u7b97\u672f\u4e2d\u4f4d\u6570")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"std\u3001var"),(0,r.kt)("td",{parentName:"tr",align:null},"\u65e0\u504f\uff08\u5206\u6bcd\u4e3a n-1\uff09\u6807\u51c6\u5dee\u548c\u65b9\u5dee")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"min\u3001max"),(0,r.kt)("td",{parentName:"tr",align:null},"\u975e NA \u503c\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"prod"),(0,r.kt)("td",{parentName:"tr",align:null},"\u975e NA \u503c\u7684\u79ef")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"first\u3001last"),(0,r.kt)("td",{parentName:"tr",align:null},"\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u975e NA \u503c")))),(0,r.kt)("p",null,"\u5982\u679c\u8981\u4f7f\u7528\u81ea\u5df1\u5b9a\u4e49\u7684\u805a\u5408\u51fd\u6570\uff0c\u53ea\u9700\u5c06\u5176\u4f20\u5165 ",(0,r.kt)("strong",{parentName:"p"},"aggregate")," \u6216 ",(0,r.kt)("strong",{parentName:"p"},"agg")," \u65b9\u6cd5\u5373\u53ef\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df\n  key1 key2     data1     data2\n0    a  one -0.606091 -1.181332\n1    a  two -0.866639  0.300651\n2    b  one -1.218590  1.054789\n3    b  two -1.984462 -1.148834\n4    a  one  0.187622  0.857184\n\n>>> grouped = df.groupby('key1')\n\n>>> def peak_to_peak(arr):\n...     return arr.max() - arr.min()\n\n>>> grouped.agg(peak_to_peak)\n         data1     data2\nkey1                    \na     1.054261  2.038516\nb     0.765872  2.203622\n")),(0,r.kt)("admonition",{title:"describe\u65b9\u6cd5",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> grouped.describe()\n     data1                                          ...     data2                                        \n     count      mean       std       min       25%  ...       min       25%       50%       75%       max\nkey1                                                ...                                                  \na      3.0 -0.428369  0.549141 -0.866639 -0.736365  ... -1.181332 -0.440341  0.300651  0.578917  0.857184\nb      2.0 -1.601526  0.541553 -1.984462 -1.792994  ... -1.148834 -0.597928 -0.047023  0.503883  1.054789\n\n[2 rows x 16 columns]\n"))),(0,r.kt)("h3",{id:"\u4e0d\u540c\u5217\u4f7f\u7528\u4e0d\u540c\u7684\u51fd\u6570"},"\u4e0d\u540c\u5217\u4f7f\u7528\u4e0d\u540c\u7684\u51fd\u6570"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> tips = pd.read_csv('examples/tips.csv')\n>>> tips['tip_pct'] = tips['tip'] / tips['total_bill']\n>>> tips[:6]\n   total_bill   tip smoker  day    time  size   tip_pct\n0       16.99  1.01     No  Sun  Dinner     2  0.059447\n1       10.34  1.66     No  Sun  Dinner     3  0.160542\n2       21.01  3.50     No  Sun  Dinner     3  0.166587\n3       23.68  3.31     No  Sun  Dinner     2  0.139780\n4       24.59  3.61     No  Sun  Dinner     4  0.146808\n5       25.29  4.71     No  Sun  Dinner     4  0.186240\n")),(0,r.kt)("p",null,"\u9996\u5148\uff0c\u6839\u636e ",(0,r.kt)("strong",{parentName:"p"},"day")," \u548c ",(0,r.kt)("strong",{parentName:"p"},"smoker")," \u5bf9 ",(0,r.kt)("strong",{parentName:"p"},"tips")," \u8fdb\u884c\u5206\u7ec4\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> grouped = tips.groupby(['day', 'smoker'])\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"\u5bf9\u4e8e\u5e38\u89c1\u805a\u5408\u51fd\u6570\uff0c\u53ef\u4ee5\u5c06\u51fd\u6570\u540d\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4f20\u5165\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> grouped_pct = grouped['tip_pct']\n\n>>> grouped_pct.agg('mean')\nday   smoker\nFri   No        0.151650\n      Yes       0.174783\nSat   No        0.158048\n      Yes       0.147906\nSun   No        0.160113\n      Yes       0.187250\nThur  No        0.160298\n      Yes       0.163863\nName: tip_pct, dtype: float64\n")),(0,r.kt)("p",null,"\u5982\u679c\u4f20\u5165\u4e00\u7ec4\u51fd\u6570\u6216\u51fd\u6570\u540d\uff0c\u5f97\u5230\u7684 ",(0,r.kt)("strong",{parentName:"p"},"DataFrame")," \u7684\u5217\u5c31\u4f1a\u4ee5\u76f8\u5e94\u7684\u51fd\u6570\u547d\u540d\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> grouped_pct.agg(['mean', 'std', peak_to_peak])\n                 mean       std  peak_to_peak\nday  smoker                                  \nFri  No      0.151650  0.028123      0.067349\n     Yes     0.174783  0.051293      0.159925\nSat  No      0.158048  0.039767      0.235193\n     Yes     0.147906  0.061375      0.290095\nSun  No      0.160113  0.042347      0.193226\n     Yes     0.187250  0.154134      0.644685\nThur No      0.160298  0.038774      0.193350\n     Yes     0.163863  0.039389      0.151240\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"\u4f60\u5e76\u975e\u4e00\u5b9a\u8981\u63a5\u53d7 ",(0,r.kt)("strong",{parentName:"p"},"GroupBy")," \u81ea\u52a8\u7ed9\u51fa\u7684\u90a3\u4e9b\u5217\u540d\uff0c\u7279\u522b\u662f ",(0,r.kt)("strong",{parentName:"p"},"lambda")," \u51fd\u6570\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f20\u5165\u7684\u662f\u4e00\u4e2a\u7531 ",(0,r.kt)("strong",{parentName:"p"},"(name,function)")," \u5143\u7ec4\u7ec4\u6210\u7684\u5217\u8868\uff0c\u5219\u5404\u5143\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c31\u4f1a\u88ab\u7528\u4f5c ",(0,r.kt)("strong",{parentName:"p"},"DataFrame")," \u7684\u5217\u540d\uff08\u53ef\u4ee5\u5c06\u8fd9\u79cd\u4e8c\u5143\u5143\u7ec4\u5217\u8868\u770b\u505a\u4e00\u4e2a\u6709\u5e8f\u6620\u5c04\uff09\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> grouped_pct.agg([('foo', 'mean'), ('bar', np.std)])\n                  foo       bar\nday  smoker                    \nFri  No      0.151650  0.028123\n     Yes     0.174783  0.051293\nSat  No      0.158048  0.039767\n     Yes     0.147906  0.061375\nSun  No      0.160113  0.042347\n     Yes     0.187250  0.154134\nThur No      0.160298  0.038774\n     Yes     0.163863  0.039389\n")),(0,r.kt)("p",null,"\u5bf9\u4e8e\u5206\u7ec4\u4e3a ",(0,r.kt)("strong",{parentName:"p"},"DataFrame")," \u65f6\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u7ec4\u5e94\u7528\u4e8e\u5168\u90e8\u5217\u7684\u4e00\u7ec4\u51fd\u6570\uff0c\u6216\u4e0d\u540c\u7684\u5217\u5e94\u7528\u4e0d\u540c\u7684\u51fd\u6570\u3002\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5bf9 ",(0,r.kt)("strong",{parentName:"p"},"tip_pct")," \u548c ",(0,r.kt)("strong",{parentName:"p"},"total_bill")," \u5217\u8ba1\u7b97\u4e09\u4e2a\u7edf\u8ba1\u4fe1\u606f\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> functions = ['count', 'mean', 'max']\n>>> result = grouped[['tip_pct', 'total_bill']].agg(functions)\n>>> result\n            tip_pct                     total_bill                  \n              count      mean       max      count       mean    max\nday  smoker                                                         \nFri  No           4  0.151650  0.187735          4  18.420000  22.75\n     Yes         15  0.174783  0.263480         15  16.813333  40.17\nSat  No          45  0.158048  0.291990         45  19.661778  48.33\n     Yes         42  0.147906  0.325733         42  21.276667  50.81\nSun  No          57  0.160113  0.252672         57  20.506667  48.17\n     Yes         19  0.187250  0.710345         19  24.120000  45.35\nThur No          45  0.160298  0.266312         45  17.113111  41.19\n     Yes         17  0.163863  0.241255         17  19.190588  43.11\n")),(0,r.kt)("p",null,"\u4e5f\u53ef\u4ee5\u4f20\u5165\u5e26\u6709\u81ea\u5b9a\u4e49\u540d\u79f0\u7684\u4e00\u7ec4\u5143\u7ec4\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> ftuples = [('Durchschnitt', 'mean'),('Abweichung', np.var)]\n>>> grouped[['tip_pct', 'total_bill']].agg(ftuples)\n                 tip_pct              total_bill            \n            Durchschnitt Abweichung Durchschnitt  Abweichung\nday  smoker                                                 \nFri  No         0.151650   0.000791    18.420000   25.596333\n     Yes        0.174783   0.002631    16.813333   82.562438\nSat  No         0.158048   0.001581    19.661778   79.908965\n     Yes        0.147906   0.003767    21.276667  101.387535\nSun  No         0.160113   0.001793    20.506667   66.099980\n     Yes        0.187250   0.023757    24.120000  109.046044\nThur No         0.160298   0.001503    17.113111   59.625081\n     Yes        0.163863   0.001551    19.190588   69.808518\n")),(0,r.kt)("p",null,"\u5982\u679c\u60f3\u8981\u5bf9\u4e00\u4e2a\u5217\u6216\u4e0d\u540c\u7684\u5217\u5e94\u7528\u4e0d\u540c\u7684\u51fd\u6570\uff0c\u5219\u5411 ",(0,r.kt)("strong",{parentName:"p"},"agg")," \u4f20\u5165\u4e00\u4e2a\u4ece\u5217\u540d\u6620\u5c04\u5230\u51fd\u6570\u7684\u5b57\u5178\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> grouped.agg({'tip' : np.max, 'size' : 'sum'})\n               tip  size\nday  smoker             \nFri  No       3.50     9\n     Yes      4.73    31\nSat  No       9.00   115\n     Yes     10.00   104\nSun  No       6.00   167\n     Yes      6.50    49\nThur No       6.70   112\n     Yes      5.00    40\n    \n>>> grouped.agg({'tip_pct' : ['min', 'max', 'mean', 'std'],'size' : 'sum'})\n              tip_pct                               size\n                  min       max      mean       std  sum\nday  smoker                                             \nFri  No      0.120385  0.187735  0.151650  0.028123    9\n     Yes     0.103555  0.263480  0.174783  0.051293   31\nSat  No      0.056797  0.291990  0.158048  0.039767  115\n     Yes     0.035638  0.325733  0.147906  0.061375  104\nSun  No      0.059447  0.252672  0.160113  0.042347  167\n     Yes     0.065660  0.710345  0.187250  0.154134   49\nThur No      0.072961  0.266312  0.160298  0.038774  112\n     Yes     0.090014  0.241255  0.163863  0.039389   40\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6240\u6709\u793a\u4f8b\u4e2d\u7684\u805a\u5408\u6570\u636e\u90fd\u6709\u7531\u552f\u4e00\u7684\u5206\u7ec4\u952e\u7ec4\u6210\u7684\u7d22\u5f15\uff08\u53ef\u80fd\u8fd8\u662f\u5c42\u6b21\u5316\u7684\uff09\u3002\u7531\u4e8e\u5e76\u4e0d\u603b\u662f\u9700\u8981\u5982\u6b64\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u5411 ",(0,r.kt)("strong",{parentName:"p"},"groupby")," \u4f20\u5165 ",(0,r.kt)("strong",{parentName:"p"},"as_index=False")," \u4ee5\u7981\u7528\u8be5\u529f\u80fd\uff1a"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> tips.groupby(['day', 'smoker'], as_index=False).mean()\n    day smoker  total_bill       tip      size   tip_pct\n0   Fri     No   18.420000  2.812500  2.250000  0.151650\n1   Fri    Yes   16.813333  2.714000  2.066667  0.174783\n2   Sat     No   19.661778  3.102889  2.555556  0.158048\n3   Sat    Yes   21.276667  2.875476  2.476190  0.147906\n4   Sun     No   20.506667  3.167895  2.929825  0.160113\n5   Sun    Yes   24.120000  3.516842  2.578947  0.187250\n6  Thur     No   17.113111  2.673778  2.488889  0.160298\n7  Thur    Yes   19.190588  3.030000  2.352941  0.163863\n"))),(0,r.kt)("h3",{id:"apply"},"apply"),(0,r.kt)("p",null,"\u56de\u5230\u4e4b\u524d\u90a3\u4e2a\u5c0f\u8d39\u6570\u636e\u96c6\uff0c\u5047\u8bbe\u4f60\u60f3\u8981\u6839\u636e\u5206\u7ec4\u9009\u51fa\u6700\u9ad8\u7684 ",(0,r.kt)("strong",{parentName:"p"},"5")," \u4e2a ",(0,r.kt)("strong",{parentName:"p"},"tip_pct")," \u503c\u3002\u9996\u5148\uff0c\u7f16\u5199\u4e00\u4e2a\u9009\u53d6\u6307\u5b9a\u5217\u5177\u6709\u6700\u5927\u503c\u7684\u884c\u7684\u51fd\u6570\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> def top(df, n=5, column='tip_pct'):\n...     return df.sort_values(by=column)[-n:]\n... \n>>> top(tips, n=6)\n     total_bill   tip smoker  day    time  size   tip_pct\n109       14.31  4.00    Yes  Sat  Dinner     2  0.279525\n183       23.17  6.50    Yes  Sun  Dinner     4  0.280535\n232       11.61  3.39     No  Sat  Dinner     2  0.291990\n67         3.07  1.00    Yes  Sat  Dinner     1  0.325733\n178        9.60  4.00    Yes  Sun  Dinner     2  0.416667\n172        7.25  5.15    Yes  Sun  Dinner     2  0.710345\n")),(0,r.kt)("p",null,"\u73b0\u5728\uff0c\u5982\u679c\u5bf9 ",(0,r.kt)("strong",{parentName:"p"},"smoker")," \u5206\u7ec4\u5e76\u7528\u8be5\u51fd\u6570\u8c03\u7528 ",(0,r.kt)("strong",{parentName:"p"},"apply"),"\uff0c\u5c31\u4f1a\u5f97\u5230\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> tips.groupby('smoker').apply(top)\n            total_bill   tip smoker   day    time  size   tip_pct\nsmoker                                                           \nNo     88        24.71  5.85     No  Thur   Lunch     2  0.236746\n       185       20.69  5.00     No   Sun  Dinner     5  0.241663\n       51        10.29  2.60     No   Sun  Dinner     2  0.252672\n       149        7.51  2.00     No  Thur   Lunch     2  0.266312\n       232       11.61  3.39     No   Sat  Dinner     2  0.291990\nYes    109       14.31  4.00    Yes   Sat  Dinner     2  0.279525\n       183       23.17  6.50    Yes   Sun  Dinner     4  0.280535\n       67         3.07  1.00    Yes   Sat  Dinner     1  0.325733\n       178        9.60  4.00    Yes   Sun  Dinner     2  0.416667\n       172        7.25  5.15    Yes   Sun  Dinner     2  0.710345\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"top")," \u51fd\u6570\u5728 ",(0,r.kt)("strong",{parentName:"p"},"DataFrame")," \u7684\u5404\u4e2a\u7247\u6bb5\u4e0a\u8c03\u7528\uff0c\u7136\u540e\u7ed3\u679c\u7531 ",(0,r.kt)("strong",{parentName:"p"},"pandas.concat")," \u7ec4\u88c5\u5230\u4e00\u8d77\uff0c\u5e76\u4ee5\u5206\u7ec4\u540d\u79f0\u8fdb\u884c\u4e86\u6807\u8bb0\u3002\u4e8e\u662f\uff0c\u6700\u7ec8\u7ed3\u679c\u5c31\u6709\u4e86\u4e00\u4e2a\u5c42\u6b21\u5316\u7d22\u5f15\uff0c\u5176\u5185\u5c42\u7d22\u5f15\u503c\u6765\u81ea\u539f ",(0,r.kt)("strong",{parentName:"p"},"DataFrame"),"\u3002")),(0,r.kt)("p",null,"\u5982\u679c\u4f20\u7ed9 ",(0,r.kt)("strong",{parentName:"p"},"apply")," \u7684\u51fd\u6570\u80fd\u591f\u63a5\u53d7\u5176\u4ed6\u53c2\u6570\u6216\u5173\u952e\u5b57\uff0c\u5219\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u5185\u5bb9\u653e\u5728\u51fd\u6570\u540d\u540e\u9762\u4e00\u5e76\u4f20\u5165\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> tips.groupby(['smoker', 'day']).apply(top, n=1, column='total_bill')\n                 total_bill    tip smoker   day    time  size   tip_pct\nsmoker day                                                             \nNo     Fri  94        22.75   3.25     No   Fri  Dinner     2  0.142857\n       Sat  212       48.33   9.00     No   Sat  Dinner     4  0.186220\n       Sun  156       48.17   5.00     No   Sun  Dinner     6  0.103799\n       Thur 142       41.19   5.00     No  Thur   Lunch     5  0.121389\nYes    Fri  95        40.17   4.73    Yes   Fri  Dinner     4  0.117750\n       Sat  170       50.81  10.00    Yes   Sat  Dinner     3  0.196812\n       Sun  182       45.35   3.50    Yes   Sun  Dinner     3  0.077178\n       Thur 197       43.11   5.00    Yes  Thur   Lunch     4  0.115982\n")))}u.isMDXComponent=!0},5643:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/group1-0c1e8822f37c09e8bb28b4174802a9bd.png"}}]);