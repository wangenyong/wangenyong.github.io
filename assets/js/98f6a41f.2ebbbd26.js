"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2296],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>c});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function p(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var i=a.createContext({}),d=function(t){var e=a.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):p(p({},e),t)),n},m=function(t){var e=d(t.components);return a.createElement(i.Provider,{value:e},t.children)},s="mdxType",N={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},g=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,i=t.parentName,m=l(t,["components","mdxType","originalType","parentName"]),s=d(n),g=r,c=s["".concat(i,".").concat(g)]||s[g]||N[g]||o;return n?a.createElement(c,p(p({ref:e},m),{},{components:n})):a.createElement(c,p({ref:e},m))}));function c(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,p=new Array(o);p[0]=g;var l={};for(var i in e)hasOwnProperty.call(e,i)&&(l[i]=e[i]);l.originalType=t,l[s]="string"==typeof t?t:r,p[1]=l;for(var d=2;d<o;d++)p[d]=n[d];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7052:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>p,default:()=>N,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:4,title:"\u6570\u636e\u6e05\u6d17"},p=void 0,l={unversionedId:"pandas/data-cleaning",id:"pandas/data-cleaning",title:"\u6570\u636e\u6e05\u6d17",description:"\u5904\u7406\u7f3a\u5931\u6570\u636e",source:"@site/docs/pandas/data-cleaning.md",sourceDirName:"pandas",slug:"/pandas/data-cleaning",permalink:"/docs/pandas/data-cleaning",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/pandas/data-cleaning.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"\u6570\u636e\u6e05\u6d17"},sidebar:"tutorialSidebar",previous:{title:"\u6570\u636e\u52a0\u8f7d\u4e0e\u8f93\u51fa",permalink:"/docs/pandas/input-output"},next:{title:"\u6570\u636e\u5408\u5e76\u91cd\u5851",permalink:"/docs/pandas/data-wrangling"}},i={},d=[{value:"\u5904\u7406\u7f3a\u5931\u6570\u636e",id:"\u5904\u7406\u7f3a\u5931\u6570\u636e",level:2},{value:"\u7f3a\u5931\u6570\u636e",id:"\u7f3a\u5931\u6570\u636e",level:3},{value:"\u8fc7\u6ee4 dropna",id:"\u8fc7\u6ee4-dropna",level:3},{value:"\u586b\u5145 fillna",id:"\u586b\u5145-fillna",level:3},{value:"\u6570\u636e\u8f6c\u6362",id:"\u6570\u636e\u8f6c\u6362",level:2},{value:"\u79fb\u51fa\u91cd\u590d\u6570\u636e",id:"\u79fb\u51fa\u91cd\u590d\u6570\u636e",level:3},{value:"\u51fd\u6570\u6620\u5c04",id:"\u51fd\u6570\u6620\u5c04",level:3},{value:"\u66ff\u6362\u503c replace",id:"\u66ff\u6362\u503c-replace",level:3},{value:"\u7d22\u5f15\u91cd\u547d\u540d",id:"\u7d22\u5f15\u91cd\u547d\u540d",level:3},{value:"\u79bb\u6563\u5316",id:"\u79bb\u6563\u5316",level:3},{value:"\u5b57\u7b26\u4e32\u64cd\u4f5c",id:"\u5b57\u7b26\u4e32\u64cd\u4f5c",level:2},{value:"\u5b57\u7b26\u4e32\u65b9\u6cd5",id:"\u5b57\u7b26\u4e32\u65b9\u6cd5",level:3},{value:"\u6b63\u5219\u8868\u8fbe\u5f0f",id:"\u6b63\u5219\u8868\u8fbe\u5f0f",level:3},{value:"\u5b57\u7b26\u4e32\u51fd\u6570",id:"\u5b57\u7b26\u4e32\u51fd\u6570",level:3}],m={toc:d},s="wrapper";function N(t){let{components:e,...n}=t;return(0,r.kt)(s,(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"\u5904\u7406\u7f3a\u5931\u6570\u636e"},"\u5904\u7406\u7f3a\u5931\u6570\u636e"),(0,r.kt)("h3",{id:"\u7f3a\u5931\u6570\u636e"},"\u7f3a\u5931\u6570\u636e"),(0,r.kt)("p",null,"\u5728 ",(0,r.kt)("strong",{parentName:"p"},"pandas")," \u4e2d\uff0c\u7f3a\u5931\u503c\u901a\u5e38\u8868\u793a\u4e3a ",(0,r.kt)("strong",{parentName:"p"},"na"),"\uff0c\u5b83\u8868\u793a ",(0,r.kt)("strong",{parentName:"p"},"not available"),"\u3002\u5bf9\u4e8e\u6570\u503c\u6570\u636e\u6765\u8bf4\uff0c",(0,r.kt)("strong",{parentName:"p"},"pandas")," \u4f7f\u7528\u6d6e\u70b9\u503c ",(0,r.kt)("strong",{parentName:"p"},"nan\uff08Not a Number\uff09"),"\u8868\u793a\u7f3a\u5931\u6570\u636e\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> string_data = pd.Series(['aardvark', 'artichoke', np.nan, 'avocado'])\n\n>>> string_data\n0     aardvark\n1    artichoke\n2          NaN\n3      avocado\ndtype: object\n    \n>>> string_data.isnull()\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n")),(0,r.kt)("admonition",{title:"Python \u5185\u7f6e\u7684 None \u503c\u5728\u5bf9\u8c61\u6570\u7ec4\u4e2d\u4e5f\u53ef\u4ee5\u4f5c\u4e3a NA",type:"info"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> string_data[0] = None\n\n>>> string_data.isnull()\n0     True\n1    False\n2     True\n3    False\ndtype: bool\n"))),(0,r.kt)("h3",{id:"\u8fc7\u6ee4-dropna"},"\u8fc7\u6ee4 dropna"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> from numpy import nan as NA\n>>> data = pd.Series([1, NA, 3.5, NA, 7])\n\n>>> data\n0    1.0\n1    NaN\n2    3.5\n3    NaN\n4    7.0\ndtype: float64\n    \n>>> data.dropna()\n0    1.0\n2    3.5\n4    7.0\ndtype: float64\n")),(0,r.kt)("admonition",{title:"\u7b49\u4ef7\u4e8e",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data[data.notnull()]\n0    1.0\n2    3.5\n4    7.0\ndtype: float64\n"))),(0,r.kt)("admonition",{title:"\u5bf9\u4e8e DataFrame\uff0cdropna \u9ed8\u8ba4\u4e22\u5f03\u4efb\u4f55\u542b\u6709\u7f3a\u5931\u503c\u7684\u884c",type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data = pd.DataFrame([[1., 6.5, 3.], [1., NA, NA],[NA, NA, NA], [NA, 6.5, 3.]])\n>>> data\n     0    1    2\n0  1.0  6.5  3.0\n1  1.0  NaN  NaN\n2  NaN  NaN  NaN\n3  NaN  6.5  3.0\n\n>>> cleaned = data.dropna()\n>>> cleaned\n     0    1    2\n0  1.0  6.5  3.0\n"))),(0,r.kt)("admonition",{title:"\u4f20\u5165 how='all' \u5c06\u53ea\u4e22\u5f03\u5168\u4e3aNA\u7684\u90a3\u4e9b\u884c",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data.dropna(how='all')\n     0    1    2\n0  1.0  6.5  3.0\n1  1.0  NaN  NaN\n3  NaN  6.5  3.0\n"))),(0,r.kt)("admonition",{title:"\u5982\u679c\u8981\u8fc7\u6ee4\u5217\uff0c\u53ea\u9700\u4f20\u5165 axis=1 \u5373\u53ef",type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data[4] = NA\n>>> data\n     0    1    2   4\n0  1.0  6.5  3.0 NaN\n1  1.0  NaN  NaN NaN\n2  NaN  NaN  NaN NaN\n3  NaN  6.5  3.0 NaN\n>>> data.dropna(axis=1, how='all')\n     0    1    2\n0  1.0  6.5  3.0\n1  1.0  NaN  NaN\n2  NaN  NaN  NaN\n3  NaN  6.5  3.0\n"))),(0,r.kt)("h3",{id:"\u586b\u5145-fillna"},"\u586b\u5145 fillna"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df\n          0         1         2\n0  0.718710       NaN       NaN\n1  0.219162       NaN       NaN\n2 -1.670341       NaN -1.951170\n3 -0.362809       NaN -1.309137\n4 -1.006110 -0.164043 -0.892337\n5  1.226407  1.449656  1.484279\n6 -0.523763  1.484114 -0.207278\n\n>>> df.fillna(0)\n          0         1         2\n0  0.718710  0.000000  0.000000\n1  0.219162  0.000000  0.000000\n2 -1.670341  0.000000 -1.951170\n3 -0.362809  0.000000 -1.309137\n4 -1.006110 -0.164043 -0.892337\n5  1.226407  1.449656  1.484279\n6 -0.523763  1.484114 -0.207278\n")),(0,r.kt)("admonition",{title:"\u4e0d\u540c\u5217\u586b\u5145\u4e0d\u540c\u503c",type:"info"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df.fillna({1: 0.5, 2: 0})\n          0         1         2\n0  0.718710  0.500000  0.000000\n1  0.219162  0.500000  0.000000\n2 -1.670341  0.500000 -1.951170\n3 -0.362809  0.500000 -1.309137\n4 -1.006110 -0.164043 -0.892337\n5  1.226407  1.449656  1.484279\n6 -0.523763  1.484114 -0.207278\n"))),(0,r.kt)("admonition",{title:"\u5bf9\u73b0\u6709\u5bf9\u8c61\u76f4\u63a5\u4fee\u6539",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> df.fillna(0, inplace=True)\n>>> df\n          0         1         2\n0  0.718710  0.000000  0.000000\n1  0.219162  0.000000  0.000000\n2 -1.670341  0.000000 -1.951170\n3 -0.362809  0.000000 -1.309137\n4 -1.006110 -0.164043 -0.892337\n5  1.226407  1.449656  1.484279\n6 -0.523763  1.484114 -0.207278\n"))),(0,r.kt)("h2",{id:"\u6570\u636e\u8f6c\u6362"},"\u6570\u636e\u8f6c\u6362"),(0,r.kt)("h3",{id:"\u79fb\u51fa\u91cd\u590d\u6570\u636e"},"\u79fb\u51fa\u91cd\u590d\u6570\u636e"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data = pd.DataFrame({'k1': ['one', 'two'] * 3 + ['two'],\n                         'k2': [1, 1, 2, 3, 3, 4, 4]})\n>>> data\n    k1  k2\n0  one   1\n1  two   1\n2  one   2\n3  two   3\n4  one   3\n5  two   4\n6  two   4\n")),(0,r.kt)("admonition",{title:"duplicated \u8868\u793a\u5404\u884c\u662f\u5426\u662f\u91cd\u590d\u884c",type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data.duplicated()\n0    False\n1    False\n2    False\n3    False\n4    False\n5    False\n6     True\ndtype: bool\n"))),(0,r.kt)("admonition",{title:"drop_duplicates  \u9ed8\u8ba4\u5224\u65ad\u5168\u90e8\u7684\u5217",type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data.drop_duplicates()\n    k1  k2\n0  one   1\n1  two   1\n2  one   2\n3  two   3\n4  one   3\n5  two   4\n"))),(0,r.kt)("admonition",{title:"drop_duplicates  \u6307\u5b9a\u90e8\u5206\u5217\u8fdb\u884c\u91cd\u590d\u9879\u5224\u65ad",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data['v1'] = range(7)\n>>> data\n    k1  k2  v1\n0  one   1   0\n1  two   1   1\n2  one   2   2\n3  two   3   3\n4  one   3   4\n5  two   4   5\n6  two   4   6\n\n>>> data.drop_duplicates(['k1'])\n    k1  k2  v1\n0  one   1   0\n1  two   1   1\n"))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"drop_duplicates")," \u9ed8\u8ba4\u4fdd\u7559\u7684\u662f\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u503c\u7ec4\u5408\u3002\u4f20\u5165 ",(0,r.kt)("strong",{parentName:"p"},"keep='last'")," \u5219\u4fdd\u7559\u6700\u540e\u4e00\u4e2a\u3002"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data.drop_duplicates(['k1', 'k2'], keep='last')\n    k1  k2  v1\n0  one   1   0\n1  two   1   1\n2  one   2   2\n3  two   3   3\n4  one   3   4\n6  two   4   6\n"))),(0,r.kt)("h3",{id:"\u51fd\u6570\u6620\u5c04"},"\u51fd\u6570\u6620\u5c04"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data = pd.DataFrame({'food': ['bacon', 'pulled pork', \n                                  'bacon','Pastrami', 'corned beef', \n                                  'Bacon','pastrami', 'honey ham', 'nova lox'],\n                         'ounces': [4, 3, 12, 6, 7.5, 8, 3, 5, 6]})\n>>> data\n          food  ounces\n0        bacon     4.0\n1  pulled pork     3.0\n2        bacon    12.0\n3     Pastrami     6.0\n4  corned beef     7.5\n5        Bacon     8.0\n6     pastrami     3.0\n7    honey ham     5.0\n8     nova lox     6.0\n")),(0,r.kt)("p",null,"\u8089\u7c7b\u5230\u52a8\u7269\u7684\u6620\u5c04\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> meat_to_animal = {\n...   'bacon': 'pig',\n...   'pulled pork': 'pig',\n...   'pastrami': 'cow',\n...   'corned beef': 'cow',\n...   'honey ham': 'pig',\n...   'nova lox': 'salmon'\n... }\n")),(0,r.kt)("admonition",{title:"\u7edf\u4e00\u5927\u5c0f\u5199",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> lowercased = data['food'].str.lower()\n>>> lowercased\n0          bacon\n1    pulled pork\n2          bacon\n3       pastrami\n4    corned beef\n5          bacon\n6       pastrami\n7      honey ham\n8       nova lox\nName: food, dtype: object\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data['animal'] = lowercased.map(meat_to_animal)\n>>> data\n          food  ounces  animal\n0        bacon     4.0     pig\n1  pulled pork     3.0     pig\n2        bacon    12.0     pig\n3     Pastrami     6.0     cow\n4  corned beef     7.5     cow\n5        Bacon     8.0     pig\n6     pastrami     3.0     cow\n7    honey ham     5.0     pig\n8     nova lox     6.0  salmon\n")),(0,r.kt)("admonition",{title:"lambda",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data['food'].map(lambda x: meat_to_animal[x.lower()])\n0       pig\n1       pig\n2       pig\n3       cow\n4       cow\n5       pig\n6       cow\n7       pig\n8    salmon\nName: food, dtype: object\n"))),(0,r.kt)("h3",{id:"\u66ff\u6362\u503c-replace"},"\u66ff\u6362\u503c replace"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data = pd.Series([1., -999., 2., -999., -1000., 3.])\n>>> data\n0       1.0\n1    -999.0\n2       2.0\n3    -999.0\n4   -1000.0\n5       3.0\ndtype: float64\n")),(0,r.kt)("admonition",{title:"\u66ff\u6362 -999",type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data.replace(-999, np.nan)\n0       1.0\n1       NaN\n2       2.0\n3       NaN\n4   -1000.0\n5       3.0\ndtype: float64\n"))),(0,r.kt)("admonition",{title:"\u66ff\u6362\u591a\u4e2a\u503c",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data.replace([-999, -1000], np.nan)\n0    1.0\n1    NaN\n2    2.0\n3    NaN\n4    NaN\n5    3.0\ndtype: float64\n"))),(0,r.kt)("admonition",{title:"\u66ff\u6362\u4e0d\u540c\u7684\u503c",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data.replace([-999, -1000], np.nan)\n0    1.0\n1    NaN\n2    2.0\n3    NaN\n4    NaN\n5    3.0\ndtype: float64\n"))),(0,r.kt)("h3",{id:"\u7d22\u5f15\u91cd\u547d\u540d"},"\u7d22\u5f15\u91cd\u547d\u540d"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data = pd.DataFrame(np.arange(12).reshape((3, 4)),\n                        index=['Ohio', 'Colorado', 'New York'],\n                        columns=['one', 'two', 'three', 'four'])\n>>> data\n          one  two  three  four\nOhio        0    1      2     3\nColorado    4    5      6     7\nNew York    8    9     10    11\n\n>>> transform = lambda x: x[:4].upper()\n\n>>> data.index.map(transform)\nIndex(['OHIO', 'COLO', 'NEW '], dtype='object')\n")),(0,r.kt)("admonition",{title:"\u76f4\u63a5\u8d4b\u503c\u4fee\u6539",type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data.index = data.index.map(transform)\n>>> data\n      one  two  three  four\nOHIO    0    1      2     3\nCOLO    4    5      6     7\nNEW     8    9     10    11\n"))),(0,r.kt)("admonition",{title:"rename",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"data.rename(index=str.title, columns=str.upper)\n      ONE  TWO  THREE  FOUR\nOhio    0    1      2     3\nColo    4    5      6     7\nNew     8    9     10    11\n"))),(0,r.kt)("admonition",{title:"rename\u8fd8\u53ef\u4ee5\u7ed3\u5408\u5b57\u5178\u5bf9\u90e8\u5206\u8f74\u6807\u7b7e\u7684\u66f4\u65b0",type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data.rename(index={'OHIO': 'INDIANA'},\n                columns={'three': 'peekaboo'})\n         one  two  peekaboo  four\nINDIANA    0    1         2     3\nCOLO       4    5         6     7\nNEW        8    9        10    11\n"))),(0,r.kt)("admonition",{title:"rename \u76f4\u63a5\u4fee\u6539",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data.rename(index={'OHIO': 'INDIANA'}, inplace=True)\n>>> data\n         one  two  three  four\nINDIANA    0    1      2     3\nCOLO       4    5      6     7\nNEW        8    9     10    11\n"))),(0,r.kt)("h3",{id:"\u79bb\u6563\u5316"},"\u79bb\u6563\u5316"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> ages = [20, 22, 25, 27, 21, 23, 37, 31, 61, 45, 41, 32]\n")),(0,r.kt)("admonition",{title:"\u5212\u5206",type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> bins = [18, 25, 35, 60, 100]\n>>> cats = pd.cut(ages, bins)\n>>> cats\n[(18, 25], (18, 25], (18, 25], (25, 35], (18, 25], ..., (25, 35], (60, 100], (35, 60], (35, 60], (25, 35]]\nLength: 12\nCategories (4, interval[int64]): [(18, 25] < (25, 35] < (35, 60] < (60, 100]]\n"))),(0,r.kt)("admonition",{title:"\u7edf\u8ba1",type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> cats.codes\narray([0, 0, 0, 1, 0, 0, 2, 1, 3, 2, 2, 1], dtype=int8)\n\n>>> cats.categories\nIntervalIndex([(18, 25], (25, 35], (35, 60], (60, 100]],\n              closed='right',\n              dtype='interval[int64]')\n                                    \n>>> pd.value_counts(cats)\n(18, 25]     5\n(35, 60]     3\n(25, 35]     3\n(60, 100]    1\ndtype: int64\n"))),(0,r.kt)("admonition",{title:"\u8c03\u6574\u95ed\u7aef",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> pd.cut(ages, [18, 26, 36, 61, 100], right=False)\n[[18, 26), [18, 26), [18, 26), [26, 36), [18, 26), ..., [26, 36), [61, 100), [36, 61), [36, 61), [26, 36)]\nLength: 12\nCategories (4, interval[int64]): [[18, 26) < [26, 36) < [36, 61) < [61, 100)]\n"))),(0,r.kt)("admonition",{title:"\u8bbe\u7f6e\u533a\u95f4\u540d\u79f0",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> group_names = ['Youth', 'YoungAdult', 'MiddleAged', 'Senior']\n>>> pd.cut(ages, bins, labels=group_names)\n[Youth, Youth, Youth, YoungAdult, Youth, ..., YoungAdult, Senior, MiddleAged, MiddleAged, YoungAdult]\nLength: 12\nCategories (4, object): [Youth < YoungAdult < MiddleAged < Senior]\n"))),(0,r.kt)("h2",{id:"\u5b57\u7b26\u4e32\u64cd\u4f5c"},"\u5b57\u7b26\u4e32\u64cd\u4f5c"),(0,r.kt)("h3",{id:"\u5b57\u7b26\u4e32\u65b9\u6cd5"},"\u5b57\u7b26\u4e32\u65b9\u6cd5"),(0,r.kt)("p",null,"\u5bf9\u4e8e\u8bb8\u591a\u5b57\u7b26\u4e32\u5904\u7406\u548c\u811a\u672c\u5e94\u7528\uff0c\u5185\u7f6e\u7684\u5b57\u7b26\u4e32\u65b9\u6cd5\u5df2\u7ecf\u80fd\u591f\u6ee1\u8db3\u8981\u6c42\u4e86\u3002\u4f8b\u5982\uff0c\u4ee5\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u7528 ",(0,r.kt)("strong",{parentName:"p"},"split")," \u62c6\u5206\u6210\u6570\u6bb5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> val = 'a,b,  guido'\n>>> val.split(',')\n['a', 'b', '  guido']\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"split")," \u5e38\u5e38\u4e0e ",(0,r.kt)("strong",{parentName:"p"},"strip")," \u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u53bb\u9664\u7a7a\u767d\u7b26\uff08\u5305\u62ec\u6362\u884c\u7b26\uff09\uff1a"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> pieces = [x.strip() for x in val.split(',')]\n>>> pieces\n['a', 'b', 'guido']\n"))),(0,r.kt)("p",null,"\u5229\u7528\u52a0\u6cd5\uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u5b50\u5b57\u7b26\u4e32\u4ee5\u53cc\u5192\u53f7\u5206\u9694\u7b26\u7684\u5f62\u5f0f\u8fde\u63a5\u8d77\u6765\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> first, second, third = pieces\n>>> first + '::' + second + '::' + third\n'a::b::guido'\n")),(0,r.kt)("admonition",{title:"join",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> '::'.join(pieces)\n'a::b::guido'\n"))),(0,r.kt)("p",null,"\u68c0\u6d4b\u5b50\u4e32\u7684\u6700\u4f73\u65b9\u5f0f\u662f\u5229\u7528 ",(0,r.kt)("strong",{parentName:"p"},"Python")," \u7684 ",(0,r.kt)("strong",{parentName:"p"},"in")," \u5173\u952e\u5b57\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 ",(0,r.kt)("strong",{parentName:"p"},"index")," \u548c ",(0,r.kt)("strong",{parentName:"p"},"find"),"\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> val\n'a,b,  guido'\n\n>>> 'guido' in val\nTrue\n>>> val.index(',')\n1\n>>> val.find(':')\n-1\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"\u6ce8\u610f ",(0,r.kt)("strong",{parentName:"p"},"find")," \u548c ",(0,r.kt)("strong",{parentName:"p"},"index")," \u7684\u533a\u522b\uff1a\u5982\u679c\u627e\u4e0d\u5230\u5b57\u7b26\u4e32\uff0c",(0,r.kt)("strong",{parentName:"p"},"index")," \u5c06\u4f1a\u5f15\u53d1\u4e00\u4e2a\u5f02\u5e38\uff08\u800c\u4e0d\u662f\u8fd4\u56de\uff0d1\uff09\u3002"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> val.index(':')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: substring not found\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"count")," \u53ef\u4ee5\u8fd4\u56de\u6307\u5b9a\u5b50\u4e32\u7684\u51fa\u73b0\u6b21\u6570\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> val.count(',')\n2\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"replace")," \u4f20\u5165\u7a7a\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u7528\u4e8e\u5220\u9664\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> val.replace(',', '::')\n'a::b::  guido'\n>>> val.replace(',', '')\n'ab  guido'\n")),(0,r.kt)("h3",{id:"\u6b63\u5219\u8868\u8fbe\u5f0f"},"\u6b63\u5219\u8868\u8fbe\u5f0f"),(0,r.kt)("p",null,"\u5047\u8bbe\u6211\u60f3\u8981\u62c6\u5206\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5206\u9694\u7b26\u4e3a\u6570\u91cf\u4e0d\u5b9a\u7684\u4e00\u7ec4\u7a7a\u767d\u7b26\uff08\u5236\u8868\u7b26\u3001\u7a7a\u683c\u3001\u6362\u884c\u7b26\u7b49\uff09\u3002\u63cf\u8ff0\u4e00\u4e2a\u6216\u591a\u4e2a\u7a7a\u767d\u7b26\u7684 ",(0,r.kt)("strong",{parentName:"p"},"regex")," \u662f ",(0,r.kt)("strong",{parentName:"p"},"\\s+"),"\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> import re\n>>> text = \"foo    bar\\t baz  \\tqux\"\n>>> re.split('\\s+', text)\n['foo', 'bar', 'baz', 'qux']\n")),(0,r.kt)("admonition",{title:"regex",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> regex = re.compile('\\s+')\n>>> regex.split(text)\n['foo', 'bar', 'baz', 'qux']\n"))),(0,r.kt)("p",null,"\u5982\u679c\u53ea\u5e0c\u671b\u5f97\u5230\u5339\u914d ",(0,r.kt)("strong",{parentName:"p"},"regex")," \u7684\u6240\u6709\u6a21\u5f0f\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 ",(0,r.kt)("strong",{parentName:"p"},"findall")," \u65b9\u6cd5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> regex.findall(text)\n['    ', '\\t ', '  \\t']\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"match")," \u548c ",(0,r.kt)("strong",{parentName:"p"},"search")," \u8ddf ",(0,r.kt)("strong",{parentName:"p"},"findall")," \u529f\u80fd\u7c7b\u4f3c\u3002",(0,r.kt)("strong",{parentName:"p"},"findall")," \u8fd4\u56de\u7684\u662f\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u7684\u5339\u914d\u9879\uff0c\u800c ",(0,r.kt)("strong",{parentName:"p"},"search")," \u5219\u53ea\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u3002",(0,r.kt)("strong",{parentName:"p"},"match")," \u66f4\u52a0\u4e25\u683c\uff0c\u5b83\u53ea\u5339\u914d\u5b57\u7b26\u4e32\u7684\u9996\u90e8\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'>>> text = """Dave dave@google.com\n... Steve steve@gmail.com\n... Rob rob@gmail.com\n... Ryan ryan@yahoo.com\n... """\n>>> text\n\'Dave dave@google.com\\nSteve steve@gmail.com\\nRob rob@gmail.com\\nRyan ryan@yahoo.com\\n\'\n\n>>> pattern = r\'[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}\'\n>>> regex = re.compile(pattern, flags=re.IGNORECASE)\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"\u5bf9 ",(0,r.kt)("strong",{parentName:"p"},"text")," \u4f7f\u7528 ",(0,r.kt)("strong",{parentName:"p"},"findall")," \u5c06\u5f97\u5230\u4e00\u7ec4\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff1a"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> regex.findall(text)\n['dave@google.com', 'steve@gmail.com', 'rob@gmail.com', 'ryan@yahoo.com']\n"))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"search")," \u8fd4\u56de\u7684\u662f\u6587\u672c\u4e2d\u7b2c\u4e00\u4e2a\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff08\u4ee5\u7279\u6b8a\u7684\u5339\u914d\u9879\u5bf9\u8c61\u5f62\u5f0f\u8fd4\u56de\uff09\u3002\u5bf9\u4e8e\u4e0a\u9762\u90a3\u4e2a ",(0,r.kt)("strong",{parentName:"p"},"regex"),"\uff0c\u5339\u914d\u9879\u5bf9\u8c61\u80fd\u544a\u8bc9\u6211\u4eec\u6a21\u5f0f\u5728\u539f\u5b57\u7b26\u4e32\u4e2d\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\uff1a"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> m = regex.search(text)\n>>> m\n<re.Match object; span=(5, 20), match='dave@google.com'>\n>>> text[m.start():m.end()]\n'dave@google.com'\n>>> m.group()\n'dave@google.com'\n"))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"regex.match")," \u5219\u5c06\u8fd4\u56de ",(0,r.kt)("strong",{parentName:"p"},"None"),"\uff0c\u56e0\u4e3a\u5b83\u53ea\u5339\u914d\u51fa\u73b0\u5728\u5b57\u7b26\u4e32\u5f00\u5934\u7684\u6a21\u5f0f\uff1a"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> print(regex.match(text))\nNone\n"))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"regex.sub")," \u65b9\u6cd5\u53ef\u4ee5\u5c06\u5339\u914d\u5230\u7684\u6a21\u5f0f\u66ff\u6362\u4e3a\u6307\u5b9a\u5b57\u7b26\u4e32\uff0c\u5e76\u8fd4\u56de\u6240\u5f97\u5230\u7684\u65b0\u5b57\u7b26\u4e32\uff1a"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> print(regex.sub('REDACTED', text))\nDave REDACTED\nSteve REDACTED\nRob REDACTED\nRyan REDACTED\n"))),(0,r.kt)("h3",{id:"\u5b57\u7b26\u4e32\u51fd\u6570"},"\u5b57\u7b26\u4e32\u51fd\u6570"),(0,r.kt)("p",null,"\u6e05\u7406\u5f85\u5206\u6790\u7684\u6563\u4e71\u6570\u636e\u65f6\uff0c\u5e38\u5e38\u9700\u8981\u505a\u4e00\u4e9b\u5b57\u7b26\u4e32\u89c4\u6574\u5316\u5de5\u4f5c\u3002\u66f4\u4e3a\u590d\u6742\u7684\u60c5\u51b5\u662f\uff0c\u542b\u6709\u5b57\u7b26\u4e32\u7684\u5217\u6709\u65f6\u8fd8\u542b\u6709\u7f3a\u5931\u6570\u636e\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data = {'Dave': 'dave@google.com', 'Steve': \n            'steve@gmail.com','Rob': 'rob@gmail.com', 'Wes': np.nan}\n>>> data = pd.Series(data)\n>>> data\nDave     dave@google.com\nSteve    steve@gmail.com\nRob        rob@gmail.com\nWes                  NaN\ndtype: object\n    \n>>> data.isnull()\nDave     False\nSteve    False\nRob      False\nWes       True\ndtype: bool\n")),(0,r.kt)("p",null,"\u901a\u8fc7 ",(0,r.kt)("strong",{parentName:"p"},"data.map"),"\uff0c\u6240\u6709\u5b57\u7b26\u4e32\u548c\u6b63\u5219\u8868\u8fbe\u5f0f\u65b9\u6cd5\u90fd\u80fd\u88ab\u5e94\u7528\u4e8e\uff08\u4f20\u5165 ",(0,r.kt)("strong",{parentName:"p"},"lambda")," \u8868\u8fbe\u5f0f\u6216\u5176\u4ed6\u51fd\u6570\uff09\u5404\u4e2a\u503c\uff0c\u4f46\u662f\u5982\u679c\u5b58\u5728 ",(0,r.kt)("strong",{parentName:"p"},"NA\uff08null\uff09"),"\u5c31\u4f1a\u62a5\u9519\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c",(0,r.kt)("strong",{parentName:"p"},"Series")," \u6709\u4e00\u4e9b\u80fd\u591f\u8df3\u8fc7 ",(0,r.kt)("strong",{parentName:"p"},"NA")," \u503c\u7684\u9762\u5411\u6570\u7ec4\u65b9\u6cd5\uff0c\u8fdb\u884c\u5b57\u7b26\u4e32\u64cd\u4f5c\u3002\u901a\u8fc7 ",(0,r.kt)("strong",{parentName:"p"},"Series")," \u7684 ",(0,r.kt)("strong",{parentName:"p"},"str")," \u5c5e\u6027\u5373\u53ef\u8bbf\u95ee\u8fd9\u4e9b\u65b9\u6cd5\u3002"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"\u901a\u8fc7 ",(0,r.kt)("strong",{parentName:"p"},"str.contains")," \u68c0\u67e5\u5404\u4e2a\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u662f\u5426\u542b\u6709 ",(0,r.kt)("strong",{parentName:"p"},'"gmail"'),"\uff1a"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data.str.contains('gmail')\nDave     False\nSteve     True\nRob       True\nWes        NaN\ndtype: object\n"))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\uff1a"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> pattern = r'([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\\.([A-Z]{2,4})'\n>>> data.str.findall(pattern, flags=re.IGNORECASE)\nDave     [(dave, google, com)]\nSteve    [(steve, gmail, com)]\nRob        [(rob, gmail, com)]\nWes                        NaN\n"))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"\u622a\u53d6\u5b57\u7b26\u4e32\uff1a"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data.str[:5]\nDave     dave@\nSteve    steve\nRob      rob@g\nWes        NaN\ndtype: object\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"str.cat")," \u65b9\u6cd5\u53ef\u5408\u5e76\u4e24\u5217\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},">>> data = [['Ali', 'Azmat', '30'],\n            ['Sharukh', 'Khan', '40'],\n            ['Linus', 'Torvalds', '70']]\n>>> df = pd.DataFrame(data,columns=['First','Last','Age'])\n>>> df\n     First      Last Age\n0      Ali     Azmat  30\n1  Sharukh      Khan  40\n2    Linus  Torvalds  70\n\n>>> df['Full Name'] = df['First'].str.cat(df['Last'],sep=\" \")\n>>> df\n     First      Last Age       Full Name\n0      Ali     Azmat  30       Ali Azmat\n1  Sharukh      Khan  40    Sharukh Khan\n2    Linus  Torvalds  70  Linus Torvalds\n")),(0,r.kt)("admonition",{title:"\u5b57\u7b26\u4e32\u65b9\u6cd5\u5f52\u7eb3",type:"info"},(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u65b9\u6cd5"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cat"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5b9e\u73b0\u4e0d\u540c\u5217\u5b57\u7b26\u4e32\u8fde\u63a5\u64cd\u4f5c\uff0c\u53ef\u6307\u5b9a\u5206\u9694\u7b26")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"contains"),(0,r.kt)("td",{parentName:"tr",align:null},"Return boolean array if each string contains pattern/regex")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"count"),(0,r.kt)("td",{parentName:"tr",align:null},"Count occurrences of pattern")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"extract"),(0,r.kt)("td",{parentName:"tr",align:null},"Use a regular expression with groups to extract one or more strings from a Series of strings; the result will be a DataFrame with one column per group")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"endswith"),(0,r.kt)("td",{parentName:"tr",align:null},"\u76f8\u5f53\u4e8e\u5bf9\u6bcf\u4e2a\u5143\u7d20\u6267\u884c x.endswith(pattern)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"startswith"),(0,r.kt)("td",{parentName:"tr",align:null},"\u76f8\u5f53\u4e8e\u5bf9\u6bcf\u4e2a\u5143\u7d20\u6267\u884c x.startswith(pattern)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"findall"),(0,r.kt)("td",{parentName:"tr",align:null},"Compute list of all occurrences of pattern/regex for each string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"get"),(0,r.kt)("td",{parentName:"tr",align:null},"Index into each element (retrieve i-th element)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isalnum"),(0,r.kt)("td",{parentName:"tr",align:null},"Equivalent to built-in str.alnum")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isalpha"),(0,r.kt)("td",{parentName:"tr",align:null},"Equivalent to built-in str.isalpha")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isdecimal"),(0,r.kt)("td",{parentName:"tr",align:null},"Equivalent to built-in str.isdecimal")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isdigit"),(0,r.kt)("td",{parentName:"tr",align:null},"Equivalent to built-in str.isdigit")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"islower"),(0,r.kt)("td",{parentName:"tr",align:null},"Equivalent to built-in str.islower")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isnumeric"),(0,r.kt)("td",{parentName:"tr",align:null},"Equivalent to built-in str.isnumeric")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isupper"),(0,r.kt)("td",{parentName:"tr",align:null},"Equivalent to built-in str.isupper")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"join"),(0,r.kt)("td",{parentName:"tr",align:null},"Join strings in each element of the Series with passed separator")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"len"),(0,r.kt)("td",{parentName:"tr",align:null},"Compute length of each string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lower, upper"),(0,r.kt)("td",{parentName:"tr",align:null},"Convert cases; equivalent to x.lower() or x.upper() for each element")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"match"),(0,r.kt)("td",{parentName:"tr",align:null},"Use re.match with the passed regular expression on each element, returning matched groups as list")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pad"),(0,r.kt)("td",{parentName:"tr",align:null},"Add whitespace to left, right, or both sides of strings")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"center"),(0,r.kt)("td",{parentName:"tr",align:null},"Equivalent to pad(side='both')")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"repeat"),(0,r.kt)("td",{parentName:"tr",align:null},"Duplicate values (e.g., s.str.repeat(3) is equivalent to x * 3 for each string)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"replace"),(0,r.kt)("td",{parentName:"tr",align:null},"Replace occurrences of pattern/regex with some other string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"slice"),(0,r.kt)("td",{parentName:"tr",align:null},"Slice each string in the Series")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"split"),(0,r.kt)("td",{parentName:"tr",align:null},"Split strings on delimiter or regular expression")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"strip"),(0,r.kt)("td",{parentName:"tr",align:null},"Trim whitespace from both sides, including newlines")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rstrip"),(0,r.kt)("td",{parentName:"tr",align:null},"Trim whitespace on right side")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lstrip"),(0,r.kt)("td",{parentName:"tr",align:null},"Trim whitespace on left side"))))))}N.isMDXComponent=!0}}]);