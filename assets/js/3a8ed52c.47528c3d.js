"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2318],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>f});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),c=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},d=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(a),u=r,f=p["".concat(s,".").concat(u)]||p[u]||m[u]||o;return a?t.createElement(f,l(l({ref:n},d),{},{components:a})):t.createElement(f,l({ref:n},d))}));function f(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4847:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=a(7462),r=(a(7294),a(3905));const o={sidebar_position:5,id:"Spark-SQL-Case",title:"spark SQL \u591a\u5143\u6761\u4ef6"},l=void 0,i={unversionedId:"bigdata/Spark-SQL-Case",id:"bigdata/Spark-SQL-Case",title:"spark SQL \u591a\u5143\u6761\u4ef6",description:"\u6570\u636e\u51c6\u5907",source:"@site/docs/bigdata/spark-SQL-Case.md",sourceDirName:"bigdata",slug:"/bigdata/Spark-SQL-Case",permalink:"/docs/bigdata/Spark-SQL-Case",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/bigdata/spark-SQL-Case.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,id:"Spark-SQL-Case",title:"spark SQL \u591a\u5143\u6761\u4ef6"},sidebar:"tutorialSidebar",previous:{title:"spark SQL \u6761\u4ef6\u8fc7\u6ee4",permalink:"/docs/bigdata/Spark-SQL-Filter"},next:{title:"spark SQL \u53bb\u91cd",permalink:"/docs/bigdata/Spark-SQL-Distintc"}},s={},c=[{value:"\u6570\u636e\u51c6\u5907",id:"\u6570\u636e\u51c6\u5907",level:2},{value:"when otherwise",id:"when-otherwise",level:2},{value:"case when",id:"case-when",level:2},{value:"\u7ec4\u5408\u4f7f\u7528 &amp;&amp; \u548c ||",id:"\u7ec4\u5408\u4f7f\u7528--\u548c-",level:2}],d={toc:c},p="wrapper";function m(e){let{components:n,...a}=e;return(0,r.kt)(p,(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"\u6570\u636e\u51c6\u5907"},"\u6570\u636e\u51c6\u5907"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val data = List(("James", "", "Smith", "36636", "M", 60000),\n    ("Michael", "Rose", "", "40288", "M", 70000),\n    ("Robert", "", "Williams", "42114", "", 400000),\n    ("Maria", "Anne", "Jones", "39192", "F", 500000),\n    ("Jen", "Mary", "Brown", "", "F", 0))\n\nval cols = Seq("first_name", "middle_name", "last_name", "dob", "gender", "salary")\nval df = spark.createDataFrame(data).toDF(cols: _*)\n\ndf.show(false)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------+-----------+---------+-----+------+------+\n|first_name|middle_name|last_name|dob  |gender|salary|\n+----------+-----------+---------+-----+------+------+\n|James     |           |Smith    |36636|M     |60000 |\n|Michael   |Rose       |         |40288|M     |70000 |\n|Robert    |           |Williams |42114|      |400000|\n|Maria     |Anne       |Jones    |39192|F     |500000|\n|Jen       |Mary       |Brown    |     |F     |0     |\n+----------+-----------+---------+-----+------+------+\n")),(0,r.kt)("h2",{id:"when-otherwise"},"when otherwise"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val df2 = df.withColumn("new_gender",\n    when(col("gender") === "M", "Male").when(col("gender") === "F", "Female").otherwise("Unknown"))\n\ndf2.show(false)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------+-----------+---------+-----+------+------+----------+\n|first_name|middle_name|last_name|dob  |gender|salary|new_gender|\n+----------+-----------+---------+-----+------+------+----------+\n|James     |           |Smith    |36636|M     |60000 |Male      |\n|Michael   |Rose       |         |40288|M     |70000 |Male      |\n|Robert    |           |Williams |42114|      |400000|Unknown   |\n|Maria     |Anne       |Jones    |39192|F     |500000|Female    |\n|Jen       |Mary       |Brown    |     |F     |0     |Female    |\n+----------+-----------+---------+-----+------+------+----------+\n")),(0,r.kt)("h2",{id:"case-when"},"case when"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"df.withColumn(\"new_gender\",\n    expr(\"case when gender = 'M' then 'Male' \" +\n        \"when gender = 'F' then 'Female' \" +\n        \"else 'Unknown' end\")).show(false)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------+-----------+---------+-----+------+------+----------+\n|first_name|middle_name|last_name|dob  |gender|salary|new_gender|\n+----------+-----------+---------+-----+------+------+----------+\n|James     |           |Smith    |36636|M     |60000 |Male      |\n|Michael   |Rose       |         |40288|M     |70000 |Male      |\n|Robert    |           |Williams |42114|      |400000|Unknown   |\n|Maria     |Anne       |Jones    |39192|F     |500000|Female    |\n|Jen       |Mary       |Brown    |     |F     |0     |Female    |\n+----------+-----------+---------+-----+------+------+----------+\n")),(0,r.kt)("h2",{id:"\u7ec4\u5408\u4f7f\u7528--\u548c-"},"\u7ec4\u5408\u4f7f\u7528 && \u548c ||"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val dataDF = Seq(\n    (66, "a", "4"), (67, "a", "0"), (70, "b", "4"), (71, "d", "4"\n    )).toDF("id", "code", "amt")\n\ndataDF.show(false)\n\ndataDF.withColumn("new_column",\n    when(col("code") === "a" || col("code") === "d", "A")\n        .when(col("code") === "b" && col("amt") === "4", "B")\n        .otherwise("A1")).show()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---+----+---+\n|id |code|amt|\n+---+----+---+\n|66 |a   |4  |\n|67 |a   |0  |\n|70 |b   |4  |\n|71 |d   |4  |\n+---+----+---+\n\n+---+----+---+----------+\n| id|code|amt|new_column|\n+---+----+---+----------+\n| 66|   a|  4|         A|\n| 67|   a|  0|         A|\n| 70|   b|  4|         B|\n| 71|   d|  4|         A|\n+---+----+---+----------+\n")))}m.isMDXComponent=!0}}]);